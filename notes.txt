Flex - BOX
display-flex
flex-display-column | row
gap:2rem

flex-wrap: nowrep | wrap
flex-grow : 1 em
flex:1

Grid - Box

display-grid
grid-template-row 
grid-template-column : 100px 100px 100px 100px

.item-1{
 grid-row-start:
 grid-row-end:
 grid-column-start:
 grid-end-start:
} 
 programming language
Dynamically typed language


Variable

var - 2015 //cancel

let -> 2015 ES6
let
redefine kar sakte hai
redeclare
const
const c= "deep panchal"
c="sanjsn"

before 2015 use var after 2015 use let and const invention ES6
let - not redeclare but redefine
const - not redeclare but not redefine

dynamically typed language
convention for write variable camel case $,_,123 allowed


for(let i=0; i<=50;i++) {

  //logic
}

ini condition
while(end-condition){
  //logic
  //incre/decre
}

init condition
do{
  //logic
  incre/decre
}while(end-condition)


Template Literals - Backtics
String
length
str[o] , string method upper,lower,trim(remove space)
str.slice(startindex.end index)
str1.concat(str2)
str1.replace("","")
str.charAT(indexNo) 

---------Array Collection of data-----------linear --index base

Looping over the Array collection 
For Loop
for-in
for-of

---------------Array Methods--------------------------------

push() -> Add to end  of the Array
pop() -> Remove from end of the Array
toString() -> convert to String
concat() -> 
shift() -> remove element to start& return of the Array
unshift() -> add from start of the Array
slice(startINX,EndInX) -> return piece of the Array
start basic concept of function  & return concept

//---------------function ---------------

function declaration
function logic
fuction call

function functionName()
{
  //logic
}

functionName()

functiona  Name -> return 

Arrow fnx , syntex ,modern JS function
Callback like a with ForEach

lat arr=[]

arr.forEach(function printVal(){
  console.log("hello world")
})// this is aboout call back fnx -> fnx within pass fnx
// with Arrow fnx

let nums=[12,12,12]
let cal =(num)=>{
 console.log(num*num);
}

nums.forEach(cal)

// Map and filter method
// reduce fir average pre and current 

//----------------------------------------------------------------

//--------------------------------------- arrow Function-----------------------------------

MOdern JavaScript function

function Sum()
{
  //logc
}
Sum()
Sum()=>{  
}

//---------------Today 
HTML,CSS,JS intro , linking file with HTML , expkanation about element ,console

DOM -> window -> documetn -> HTML
js to access html with the help of console.log(window.document)
like a - >  document.body.style.background="red"
DOM uses -> dynamically changes and manuplation

DOM
let a= document.getElementById("")
console.log(a)
console.dir(a)

for class
let b= document.getElementsByClassName("")
console.dir(b)

for tag
let c= document.getElementsByTagName("")

QuerySelectors/QuerySelectorsAll(Tag/.class/#id)

DOM manuplation
getvalue ans set value

Propereties
TagName,innerText,innterHTML,textContent 

concept about node,tree(parent ,child,sibling)                   

getAttribute/set getAttribute
set and change class name 
ket para = document.QuerySelectors("p)
console.log(para.getAttribute("class"))

visibilty of box click to display and hide


//-------------------------Create element in the sense Add element

let a =  document.createElement("TagName")
and set data
a.innterText="cdsjfbc"
console.log(a)


insert Data base on four Methods | first create div box and after explanation about four methods
//Insert element
node.append(el)
node.prepend(el)
node.before(el)
node.after(el)


Example : 

let newBtn = document.createElement("button");
newBtn.innerText="AAAAAAAAAAA"
console.log(newBtn)

let target = document.QuerySelectors("div")// target area for append data
target.append(newBtn);
target.prepend(newBtn);
target.after(newBtn);
target.before(newBtn);


// ----------Delete element---------------
access data

let a= document.QuerySelectors("div)
a.remove()


//--------------Prepare from your side what is appendChild and removeChild

Event

Event Listner -> addEventListener 
let btn1= document.QuerySelectors("p")
btn1.addEventListener("click",()=>{
  //logic
})  

// -------removeEventListener

// dark mode and light mode concept
// add class for dynamic so document.querySelector("body").classList.add("classname")



//-------------------------Class in JS (access class not without using his aboject let obj = new classname())
//-------------------------Constructor in JS
//-------------------------inheritance in JS


//-------------------------Error handling 
try{

}catch(err){

}

Synchronous
Asynchronous
callback hell
Promise
---------------

let promise = new Promise((resolve, reject) =>{
  console.log("I am Promise")
  resolve(123)
})

// create a new promise
// use of a promise

const getPromise = ()=>{
   return new promise ((resolve,reject)=>{
          console.log("I am a promise")
          resolve("Success")
    })
}
let promise  = getPromise()

promise.then(()=>{
 console.log("Promise is Success")
}).catch(()=>{
 console.log("Promise is Failed")
})

// async await -> modift to promises and promise hell (then and catch)

async function hello()
{

  console.log("Hello")
  //return promise
}

function APi(){
  return new Promise((resolve,reject)=>{
   setTimeout(()=>{
        console.log("Promise is Success")
      resolve(200)
   },2000)
  })
}

async function getData =()=>{
  await Api() //1st call
  await Api() //2st call
}

// Fetch API