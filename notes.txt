Flex - BOX
display-flex
flex-display-column | row
gap:2rem

flex-wrap: nowrep | wrap
flex-grow : 1 em
flex:1

Grid - Box

display-grid
grid-template-row 
grid-template-column : 100px 100px 100px 100px

.item-1{
  grid-row-start:
 grid-row-end:
 grid-column-start:
grid-end-start:
} 
 programming language
Dynamically typed language


Variable

var - 2015 //cancel

let -> 2015 ES6
let
redefine kar sakte hai
redeclare
const
const c= "deep panchal"
c="sanjsn"

before 2015 use var after 2015 use let and const invention ES6
let - not redeclare but redefine
const - not redeclare but not redefine

dynamically typed language
convention for write variable camel case $,_,123 allowed


for(let i=0; i<=50;i++) {

  //logic
}

ini condition
while(end-condition){
  //logic
  //incre/decre
}

init condition
do{
  //logic
  incre/decre
}while(end-condition)


Template Literals - Backtics
String
length
str[o] , string method upper,lower,trim(remove space)
str.slice(startindex.end index)
str1.concat(str2)
str1.replace("","")
str.charAT(indexNo) 

---------Array Collection of data-----------linear --index base

Looping over the Array collection 
For Loop
for-in
for-of

---------------Array Methods--------------------------------

push() -> Add to end  of the Array
pop() -> Remove from end of the Array
toString() -> convert to String
concat() -> 
shift() -> remove element to start& return of the Array
unshift() -> add from start of the Array
slice(startINX,EndInX) -> return piece of the Array
start basic concept of function  & return concept

//---------------function ---------------

function declaration
function logic
fuction call

function functionName()
{
  //logic
}

functionName()

functiona  Name -> return 

Arrow fnx , syntex ,modern JS function
Callback like a with ForEach

lat arr=[]

arr.forEach(function printVal(){
  console.log("hello world")
})// this is aboout call back fnx -> fnx within pass fnx
// with Arrow fnx

let nums=[12,12,12]
let cal =(num)=>{
 console.log(num*num);
}

nums.forEach(cal)


-//----------------------------------------------------------------

//--------------------------------------- arrow Function-----------------------------------

MOdern JavaScript function

function Sum()
{
  //logc
}

Sum()


Sum()=>{
  
}



